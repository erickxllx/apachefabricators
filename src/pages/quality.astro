---
import ImageMod from "@/components/ImageMod.astro";
import TextCounter from "@/components/TextCounter.astro";
import DynamicIcon from "@/helpers/DynamicIcon";
import Base from "@/layouts/Base.astro";
import bgImageMod from "@/lib/utils/bgImageMod";
import { markdownify } from "@/lib/utils/textConverter";
import MissionVision from "@/partials/MissionVision.astro";
import OurExpertise from "@/partials/OurExpertise.astro";
import PageHeader from "@/partials/PageHeader.astro";
import { getEntry, type CollectionEntry } from "astro:content";

const ourExpertiseContent = (
  (await getEntry(
    "ourExpertiseSection",
    "our-expertise"
  )) as CollectionEntry<"ourExpertiseSection">
).data;
const missionVisionContent = (
  (await getEntry(
    "missionVisionSection",
    "mission-vision"
  )) as CollectionEntry<"missionVisionSection">
).data;

const aboutIndex = (await getEntry(
  "quality",
  "-index"
)) as CollectionEntry<"quality">;
const {
  title,
  meta_title,
  description,
  image,
  philosophy,
  ceo,
  mission,
  funfacts,
  bg_image,
} = aboutIndex.data;

// Section Background Images
const funfactsBgImage = await bgImageMod(funfacts?.bg_image!);
---

<Base
  title={title}
  meta_title={meta_title}
  description={description}
  image={image}>
  <PageHeader title={title} bg_image={bg_image} />

  {/* Philosophy Section */}
  {
    philosophy?.enable && (
      <section class="section pb-0">
        <div class="container">
          <div class="row gy-5 flex-col-reverse lg:flex-row">
            <div class="lg:col-7">
              {philosophy.subtitle && (
                <span
                  class="text-lg text-text"
                  set:html={markdownify(philosophy.subtitle)}
                />
              )}
              {philosophy.title && (
                <h2 set:html={markdownify(philosophy.title)} />
              )}
              <div class="separator separator-secondary after:shadow-white after:bg-white" />

              {philosophy.content && (
                <p class="mt-8" set:html={markdownify(philosophy.content)} />
              )}
            </div>
            <div class="lg:col-5">
              {philosophy.image && (
                <ImageMod
                  src={philosophy.image}
                  width={530}
                  height={400}
                  class="w-full"
                  alt={philosophy.title || "our philosophy"}
                />
              )}
            </div>
          </div>
        </div>
      </section>
    )
  }

  {/* CEO Section */}
  {
    ceo?.enable && (
      <section class="section pb-0">
        <div class="container">
          <div class="bg-secondary text-white rounded-md overflow-hidden">
            <div class="row gy-0 xl:items-center">
              <div class="lg:col-5">
                {ceo.bg_image && (
                  <ImageMod
                    src={ceo.bg_image}
                    width={500}
                    height={526}
                    class="object-cover w-full h-96 lg:h-full object-center"
                    alt={ceo.title || "our ceo"}
                  />
                )}
              </div>
              <div class="lg:col-7">
                <div class="py-8 md:py-14 px-8">
                  {ceo.title && (
                    <h2
                      class="text-inherit"
                      set:html={markdownify(ceo.title)}
                    />
                  )}
                  <div class="separator separator-secondary  after:bg-secondary after:border-white before:bg-white" />

                  {ceo.content && (
                    <p
                      class="text-white mt-8 mb-6"
                      set:html={markdownify(ceo.content)}
                    />
                  )}

                  {ceo.signature && (
                    <ImageMod
                      src={ceo.signature}
                      width={125}
                      height={71}
                      alt={ceo.title || "signature"}
                    />
                  )}

                  {ceo.name && (
                    <h3
                      class="text-white h5 mt-2 font-medium"
                      set:html={markdownify(ceo.name)}
                    />
                  )}

                  {ceo.designation && (
                    <p
                      class="text-white font-medium"
                      set:html={markdownify(ceo.designation)}
                    />
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>
    )
  }

  {/* Mission Section */}
  {mission?.enable && <MissionVision content={missionVisionContent} />}

  {/* Funfacts Section */}
  {
    funfacts?.enable && (
      <section
        class="section-sm overlay after:bg-opacity-80 bg-cover bg-no-repeat"
        style={{ backgroundImage: `url(${funfactsBgImage})` }}>
        <div class="container z-10 relative">
          <div class="row gy-4 justify-between">
            {funfacts.counter &&
              funfacts.counter.map((funfact) => (
                <div class="md:col-6 lg:col-3 text-center">
                  <div class="flex flex-col text-center md:text-start md:flex-row lg:justify-center items-center gap-4">
                    {funfact && funfact.icon && (
                      <span
                        class={`${funfact.icon} h-[50px] xl:h-[70px] min-w-[50px] max-w-[50px] xl:min-w-[70px] xl:max-w-[70px] border border-border text-center leading-[50px] xl:leading-[70px] text-2xl xl:text-3xl bg-white text-primary inline-block rounded-full border-solid`}>
                        {funfact.icon && (
                          <DynamicIcon
                            className="inline-block"
                            icon={funfact.icon}
                          />
                        )}
                        {funfact.title && (
                          <span
                            class="sr-only"
                            set:html={markdownify(funfact.title) || "icon"}
                          />
                        )}
                      </span>
                    )}
                    <div>
                      {funfact?.count && (
                        <h3 class="h3 mb-1 text-white">
                          <TextCounter value={funfact.count} />
                        </h3>
                      )}
                      {funfact?.title && (
                        <p
                          class="opacity-80 text-white font-medium"
                          set:html={markdownify(funfact.title)}
                        />
                      )}
                    </div>
                  </div>
                </div>
              ))}
          </div>
        </div>
      </section>
    )
  }

  {/* why choose us Section */}
  <OurExpertise content={ourExpertiseContent} />
</Base>
