---
import Base from "@/layouts/Base.astro";
import { getSinglePage } from "@/lib/contentParser.astro";
import PageHeader from "@/partials/PageHeader.astro";
import { getEntry } from "astro:content";
import ProjectCard from "@/components/ProjectCard.astro";
import type { CollectionEntry } from "astro:content";
import { render } from "astro:content";

const projectsIndex = (await getEntry(
  "projects",
  "-index"
)) as CollectionEntry<"projects">;
const { title, meta_title, description, image, bg_image } = projectsIndex.data;

const COLLECTION_FOLDER = "projects";
const projects = await getSinglePage(COLLECTION_FOLDER);
const { Content } = await render(projectsIndex);

const categories: string[] = [];
projects.map(
  (project) => project.data.category && categories.push(project.data.category)
);
const uniqCategories = [...new Set([...categories])];
---

<Base
  title={title}
  meta_title={meta_title}
  description={description}
  image={image}>
  <PageHeader title={title} bg_image={bg_image} />

  {
    (
      <section class="section">
        <div class="container">
          <div class="row gy-4">
            <div class="col-12 text-center mb-5">
              {projectsIndex.body && (
                <div class="content">
                  <Content />
                </div>
              )}
            </div>
            <div class="col-12">
              {uniqCategories && (
                <ul class="flex flex-wrap justify-start md:justify-center gap-2 md:gap-x-4 gap-y-4">
                  <li>
                    <button
                      class="transition block px-6 py-1.5 border border-border rounded-full text-text-dark bg-light text-base hover:bg-primary hover:text-white [&.active]:bg-primary [&.active]:text-white active"
                      data-clear-filter-btn="all"
                      set:html="All"
                    />
                  </li>
                  {uniqCategories.map((category) => (
                    <li>
                      <button
                        class="filter-btn transition block px-6 py-1.5 border border-border rounded-full text-text-dark bg-light text-sm md:text-base hover:bg-primary hover:text-white [&.active]:bg-primary [&.active]:text-white"
                        data-type-filter-btn={category}
                        set:html={category}
                      />
                    </li>
                  ))}
                </ul>
              )}
            </div>
            <div class="col-12">
              <div id="projects-filter" class="row gy-4">
                {projects.map((project) => {
                  return (
                    <div
                      class="sm:col-6 lg:col-3"
                      data-filter-type={project.data.category}>
                      <ProjectCard content={project} />
                    </div>
                  );
                })}
              </div>
            </div>
          </div>
        </div>
      </section>
    )
  }
  <script>
    const projectWrapper = document.querySelector("#projects-filter");
    const clearFilterBtn = document.querySelector("[data-clear-filter-btn]");
    const listItems = Array.from(
      document.querySelectorAll("[data-filter-type]")
    );

    const filterTypeBtns = Array.from(
      document.querySelectorAll("[data-type-filter-btn]")
    );

    let filterType = "";
    filterTypeBtns.forEach((filterTypeBtn) => {
      filterTypeBtn.addEventListener("click", () => {
        clearFilterBtn?.classList.remove("active");
        // Remove "active" class from all buttons
        filterTypeBtns.forEach((btn) => {
          btn.classList.remove("active");
        });

        // Add "active" class to the clicked button
        filterTypeBtn.classList.add("active");

        filterType = (filterTypeBtn as HTMLElement).dataset.typeFilterBtn || "";

        const hasClass =
          projectWrapper &&
          Array.from(projectWrapper.children).some((child) =>
            child.classList.contains("hidden")
          );

        if (!hasClass) {
          projectWrapper?.classList.add("animate-parent");
        }

        setTimeout(() => {
          listItems.forEach((listItem) => {
            listItem.classList.remove("hidden");

            if ((listItem as HTMLElement).dataset.filterType === filterType) {
              listItem.classList.remove("hidden");
            } else {
              listItem.classList.add("hidden");
            }
          });
          projectWrapper?.classList.remove("animate-parent");
        }, 1);
      });
    });

    clearFilterBtn?.addEventListener("click", () => {
      clearFilterBtn?.classList.add("active");
      filterTypeBtns.forEach((btn) => {
        btn.classList.remove("active");
      });

      listItems.forEach((listItem) => {
        listItem.classList.remove("hidden");
      });
    });
  </script>
</Base>
