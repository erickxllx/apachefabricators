---
import TextCounter from "@/components/TextCounter.astro";
import DynamicIcon from "@/helpers/DynamicIcon";
import Base from "@/layouts/Base.astro";
import bgImageMod from "@/lib/utils/bgImageMod";
import { markdownify } from "@/lib/utils/textConverter";
import MissionVision from "@/partials/MissionVision.astro";
import OurExpertise from "@/partials/OurExpertise.astro";
import PageHeader from "@/partials/PageHeader.astro";
import { getEntry, type CollectionEntry } from "astro:content";

const ourExpertiseContent = (
  (await getEntry(
    "ourExpertiseSection",
    "our-expertise"
  )) as CollectionEntry<"ourExpertiseSection">
).data;
const missionVisionContent = (
  (await getEntry(
    "missionVisionSection",
    "mission-vision"
  )) as CollectionEntry<"missionVisionSection">
).data;

const aboutIndex = (await getEntry(
  "about",
  "-index"
)) as CollectionEntry<"about">;
const {
  title,
  meta_title,
  description,
  image,
  philosophy,
  ceo,
  mission,
  funfacts,
  bg_image,
} = aboutIndex.data;

// Section Background Images
const funfactsBgImage = await bgImageMod(funfacts?.bg_image!);
---

<Base
  title={title}
  meta_title={meta_title}
  description={description}
  image={image}>
<PageHeader title="About Us" bg_image="/images/about/about_us.png" />

{/* About Us Styled Like "What Makes Us Standout" */}
{philosophy?.enable && (
  <section class="bg-white py-16">
    <div class="container text-center">
      {philosophy.subtitle && (
        <p
          class="text-sm text-gray-400 uppercase mb-2"
          set:html={markdownify(philosophy.subtitle)}
        />
      )}

      {philosophy.title && (
        <h2
          class="text-3xl md:text-5xl font-bold uppercase mb-4"
          set:html={markdownify(philosophy.title)}
        />
      )}

      <div class="mx-auto h-[5px] w-[180px] bg-[url('/images/line-red.png')] bg-no-repeat bg-center my-4"></div>

      <div class="grid grid-cols-1 md:grid-cols-3 gap-8 mt-10">
        <div class="group transition-all duration-300 hover:shadow-lg hover:-translate-y-1 cursor-pointer">
          <h3 class="text-lg md:text-xl font-bold uppercase text-gray-900 mb-2 group-hover:text-red-600 transition-colors duration-300">
            FAST TURNKEY TURN AROUND
          </h3>
          <div class="h-[2px] w-[60px] bg-red-600 mx-auto group-hover:w-[80px] transition-all duration-300"></div>
        </div>

        <div class="group transition-all duration-300 hover:shadow-lg hover:-translate-y-1 cursor-pointer">
          <h3 class="text-lg md:text-xl font-bold uppercase text-gray-900 mb-2 group-hover:text-red-600 transition-colors duration-300">
            ONE STOP SHOP
          </h3>
          <div class="h-[2px] w-[60px] bg-red-600 mx-auto group-hover:w-[80px] transition-all duration-300"></div>
        </div>

        <div class="group transition-all duration-300 hover:shadow-lg hover:-translate-y-1 cursor-pointer">
          <h3 class="text-lg md:text-xl font-bold uppercase text-gray-900 mb-2 group-hover:text-red-600 transition-colors duration-300">
            30+ YEARS OF FABRICATION EXPERIENCE
          </h3>
          <div class="h-[2px] w-[60px] bg-red-600 mx-auto group-hover:w-[80px] transition-all duration-300"></div>
        </div>
      </div>
    </div>
  </section>
)}
  {/* Mission Section */}
  {mission?.enable && <MissionVision content={missionVisionContent} />}

  {/* Funfacts Section */}
  {
    funfacts?.enable && (
      <section
        class="section-sm overlay after:bg-opacity-80 bg-cover bg-no-repeat"
        style={{ backgroundImage: `url(${funfactsBgImage})` }}>
        <div class="container z-10 relative">
          <div class="row gy-4 justify-between">
            {funfacts.counter &&
              funfacts.counter.map((funfact) => (
                <div class="md:col-6 lg:col-3 text-center">
                  <div class="flex flex-col text-center md:text-start md:flex-row lg:justify-center items-center gap-4">
                    {funfact && funfact.icon && (
                      <span
                        class={`${funfact.icon} h-[50px] xl:h-[70px] min-w-[50px] max-w-[50px] xl:min-w-[70px] xl:max-w-[70px] border border-border text-center leading-[50px] xl:leading-[70px] text-2xl xl:text-3xl bg-white text-primary inline-block rounded-full border-solid`}>
                        {funfact.icon && (
                          <DynamicIcon
                            className="inline-block"
                            icon={funfact.icon}
                          />
                        )}
                        {funfact.title && (
                          <span
                            class="sr-only"
                            set:html={markdownify(funfact.title) || "icon"}
                          />
                        )}
                      </span>
                    )}
                    <div>
                      {funfact?.count && (
                        <h3 class="h3 mb-1 text-white">
                          <TextCounter value={funfact.count} />
                        </h3>
                      )}
                      {funfact?.title && (
                        <p
                          class="opacity-80 text-white font-medium"
                          set:html={markdownify(funfact.title)}
                        />
                      )}
                    </div>
                  </div>
                </div>
              ))}
          </div>
        </div>
      </section>
    )
  }

  {/* why choose us Section */}
  <OurExpertise content={ourExpertiseContent} />
</Base>
