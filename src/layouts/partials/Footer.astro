---
import Logo from "@/components/Logo.astro";
import Preloader from "@/components/Preloader.astro";
import Social from "@/components/Social.astro";
import config from "@/config/config.json";
import DynamicIcon from "@/helpers/DynamicIcon";
import menu from "@/config/menu.json";
import social from "@/config/social.json";
import { markdownify } from "@/lib/utils/textConverter";
---

<footer class="bg-dark text-sm">
  <div class="py-12 md:py-28 border-b border-border/10">
    <div class="container">
      <div class="row gy-4 justify-between">
        <div class="md:col-6 lg:col-4 xl:col-4">
          <div class="mb-5 mb-md-0">
            <Logo
              src={config.site.logo_footer}
              class="inline-block"
              footerLogo={true}
            />
            {
              config.params.footer_description && (
                <p
                  class="text-white my-8 text-sm"
                  set:html={markdownify(config.params.footer_description)}
                />
              )
            }
            <Social source={social.main} className="social-icons" />
          </div>
        </div>
        {
          menu.services && menu.services[0] && (
            <div class="xl:col-2 lg:col-3 md:col-6 sm:col-8 col-6">
              <h3 class="h5 text-white mb-5" set:html="Services" />
              <ul class="flex flex-col gap-4">
                {menu.services.map((menu) => (
                  <li>
                    <DynamicIcon
                      className="inline-block text-white me-2 align-[-1px] text-xs"
                      icon="TfiAngleRight"
                    />
                    <a
                      href={menu.url}
                      class="text-white text-sm hover:text-primary"
                      set:html={menu.name}
                    />
                  </li>
                ))}
              </ul>
            </div>
          )
        }

        {
          menu.quick_links && menu.quick_links[0] && (
            <div class="lg:col-2 md:col-4 sm:col-4 col-6">
              <h3 class="h5 text-white mb-5" set:html="Services" />
              <ul class="flex flex-col gap-4">
                {menu.quick_links.map((menu) => (
                  <li>
                    <DynamicIcon
                      className="inline-block text-white me-2 align-[-1px] text-xs"
                      icon="TfiAngleRight"
                    />
                    <a
                      href={menu.url}
                      title={menu.name}
                      class="text-white text-sm hover:text-primary"
                      set:html={menu.name}
                    />
                  </li>
                ))}
              </ul>
            </div>
          )
        }

        <!-- subscribe form -->
        {
          config.subscription_in_footer?.enable && (
            <div class="md:col-6 lg:col-3">
              <div class="mt-5 lg:mt-0">
                {config.subscription_in_footer.title && (
                  <h3
                    class="h5 mb-4 text-white"
                    set:html={markdownify(config.subscription_in_footer.title)}
                  />
                )}
                {config.subscription_in_footer.description && (
                  <p
                    class="text-white mb-6 text-sm"
                    set:html={markdownify(
                      config.subscription_in_footer.description
                    )}
                  />
                )}
                <div id="mc_embed_signup">
                  <form
                    action={config.subscription_in_footer.mailchimp_form_action}
                    method="post"
                    id="mc-embedded-subscribe-form"
                    name="mc-embedded-subscribe-form"
                    class="validate"
                    target="_blank"
                    novalidate>
                    <div id="mc_embed_signup_scroll" class="relative">
                      <input
                        type="email"
                        name="EMAIL"
                        class="required form-input placeholder:text-text-dark/70 pe-16 w-full !rounded-full p-3 pl-6"
                        id="mce-EMAIL"
                        placeholder={config.subscription_in_footer.placeholder}
                        required
                      />
                      <button
                        class="w-10 h-10 inline-flex justify-center items-center bg-primary border-0 rounded-full text-white absolute right-1.5 top-1/2 -translate-y-1/2 text-xs cursor-pointer"
                        type="submit"
                        name="subscribe"
                        aria-label="subscribe btn">
                        <DynamicIcon
                          className="inline-block text-base"
                          icon="TfiArrowRight"
                        />
                      </button>
                      <div class="absolute left-[-5000px]" aria-hidden="true">
                        <input
                          type="text"
                          tabindex="-1"
                          name={
                            config.subscription_in_footer.mailchimp_form_name
                          }
                        />
                      </div>
                    </div>
                  </form>
                </div>
              </div>
            </div>
          )
        }
      </div>
    </div>
  </div>
  <!-- copyright -->
  <div class="py-8 relative">
    <div class="container">
      <div class="flex md:justify-between flex-wrap gap-x-5 gap-y-2">
        {
          config.params.copyright && (
            <div>
              <p class="text-white text-sm">
                {config.params.copyright} | Theme by
                <a
                  target="_blank"
                  class="underline hover:text-primary"
                  rel="noopener noreferrer"
                  href="https://themefisher.com/">
                  Themefisher
                </a>
              </p>
            </div>
          )
        }
        {
          menu.footer && menu.footer[0] && (
            <ul class="flex flex-wrap gap-y-0 gap-x-4 lg:gap-x-10 md:justify-end text-center md:text-end">
              {menu.footer.map((menu) => (
                <li>
                  <a
                    class="text-white capitalize text-sm hover:text-primary"
                    href={menu.url}
                    title={menu.name}
                    set:html={menu.name}
                  />
                </li>
              ))}
            </ul>
          )
        }
      </div>
    </div>
    <!-- back to top -->
    <button class="back-to-top cursor-pointer" aria-label="scroll to top">
      <DynamicIcon className="inline-block" icon="TfiAngleUp" />
    </button>
  </div>
</footer>

<!-- Preloader -->
{config.params.preloder && <Preloader />}

<script>
  import { Swiper } from "swiper";
  import "swiper/css";
  import { Autoplay, Navigation, Pagination, Thumbs } from "swiper/modules";

  window.addEventListener("load", function () {
    const body = document.body;

    // Hide preloader
    const preloader = document.querySelector(".preloader");
    preloader?.classList.add("hidden");

    // back to top button in plain js
    let backToTop = document.querySelector(".back-to-top");
    backToTop?.addEventListener("click", function () {
      document.body.scrollTop = 0;
      document.documentElement.scrollTop = 0;
    });

    // Toggle active class on dropdown item
    const navLinks = document.querySelectorAll(".nav-dropdown .nav-link");
    navLinks.forEach((navlink) => {
      navlink.addEventListener("click", function () {
        // @ts-ignore
        this.parentElement.classList.toggle("active");
      });
    });

    // Sliders
    // ----------------------------------------
    // Hero Slider
    const bannerNavSlider = new Swiper(".banner-nav-slider", {
      spaceBetween: 10,
      slidesPerView: 4,
      watchSlidesProgress: true,
    });
    new Swiper(".banner-slider", {
      modules: [Navigation, Pagination, Autoplay, Thumbs],
      slidesPerView: 1,
      loop: true,
      centeredSlides: true,
      autoplay: {
        delay: 10000,
      },
      navigation: {
        nextEl: ".swiper-navigation .next-arrow",
        prevEl: ".swiper-navigation .prev-arrow",
      },
      thumbs: {
        swiper: bannerNavSlider,
      },
    });

    // Work Slider
    new Swiper(".work-slider", {
      modules: [Pagination, Autoplay],
      autoHeight: true,
      loop: true,
      autoplay: {
        delay: 1000,
        pauseOnMouseEnter: true,
      },
      pagination: {
        el: ".work-slider + .swiper-pagination",
        clickable: true,
      },
      breakpoints: {
        0: {
          slidesPerView: "auto",
        },
        576: {
          slidesPerView: 2,
        },
        768: {
          slidesPerView: 3,
        },
        991: {
          slidesPerView: 4,
        },
      },
    });

    // Testimonial Slider
    new Swiper(".testimonial-slider", {
      modules: [Navigation, Autoplay],
      slidesPerView: 1,
      centeredSlides: true,
      spaceBetween: 80,
      autoplay: {
        delay: 3000,
        pauseOnMouseEnter: true,
      },
      navigation: {
        prevEl: ".swiper-navigation .prevArrow",
        nextEl: ".swiper-navigation .nextArrow",
      },
    });

    // Client Logo Slider
    new Swiper(".client-logo-slider", {
      modules: [Autoplay],
      loop: true,
      autoplay: {
        delay: 3000,
        pauseOnMouseEnter: true,
      },
      breakpoints: {
        0: {
          slidesPerView: 2,
        },
        576: {
          slidesPerView: 3,
        },
        1024: {
          slidesPerView: 5,
        },
      },
    });

    // Counter
    // ----------------------------------------

    // You can change this class to specify which elements are going to behave as counters.
    const elements = document.querySelectorAll<HTMLElement>(".counter");

    elements.forEach((item) => {
      // Add new attributes to the elements with the '.counter' HTML class
      (item as any).counterAlreadyFired = false;
      (item as any).counterSpeed =
        parseInt(item.getAttribute("data-counter-time") || "0", 10) / 45;
      (item as any).counterTarget = +item.innerText;
      (item as any).counterCount = 0;
      (item as any).counterStep =
        (item as any).counterTarget / (item as any).counterSpeed;

      (item as any).updateCounter = function () {
        (item as any).counterCount =
          (item as any).counterCount + (item as any).counterStep;
        item.innerText = Math.ceil((item as any).counterCount).toString();

        if ((item as any).counterCount < (item as any).counterTarget) {
          setTimeout((item as any).updateCounter, (item as any).counterSpeed);
        } else {
          item.innerText = (item as any).counterTarget.toString();
        }
      };
    });

    // Function to determine if an element is visible on the web page
    const isElementVisible = (el: HTMLElement) => {
      const scroll = window.scrollY || window.scrollY;
      const boundsTop = el.getBoundingClientRect().top + scroll;
      const viewport = {
        top: scroll,
        bottom: scroll + window.innerHeight,
      };
      const bounds = {
        top: boundsTop,
        bottom: boundsTop + el.clientHeight,
      };
      return (
        (bounds.bottom >= viewport.top && bounds.bottom <= viewport.bottom) ||
        (bounds.top <= viewport.bottom && bounds.top >= viewport.top)
      );
    };

    // Function that will get fired upon scrolling
    const handleScroll = () => {
      elements.forEach((item) => {
        if (true === (item as any).counterAlreadyFired) return;
        if (!isElementVisible(item)) return;
        (item as any).updateCounter();
        (item as any).counterAlreadyFired = true;
      });
    };

    // Fire the function on scroll
    window.addEventListener("scroll", handleScroll);

    // Navbar Toggler
    // ----------------------------------------
    const navbarToggler = document.querySelector(".navbar-toggler");
    navbarToggler?.addEventListener("click", function () {
      navbarToggler.classList.toggle("active");
      body.classList.toggle("navbar-nav-collapsed");
    });
  });
</script>
