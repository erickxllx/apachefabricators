---
import Logo from "@/components/Logo.astro";
import Preloader from "@/components/Preloader.astro";
import Social from "@/components/Social.astro";
import config from "@/config/config.json";
import DynamicIcon from "@/helpers/DynamicIcon";
import menu from "@/config/menu.json";
import social from "@/config/social.json";
import { markdownify } from "@/lib/utils/textConverter";
---

<footer class="bg-black text-white">
  <!-- Top section: 3 columns with vertical dividers -->
  <div class="py-12 border-b border-white/20">
    <div class="container">
      <div class="flex flex-col md:flex-row justify-between items-start md:items-stretch gap-y-6 md:gap-y-0">

        <!-- Column 1: Main navigation -->
        <div class="md:flex-1">
          <ul class="space-y-4 text-left">
            {(menu.main ?? []).map(item => (
              <li>
                <a
                  href={item.url}
                  class="text-white uppercase hover:text-red-600 transition-colors"
                >
                  {item.name}
                </a>
              </li>
            ))}
          </ul>
        </div>

        <!-- Vertical divider -->
        <div class="self-stretch hidden md:block border-l border-white/20 mx-8"></div>

        <!-- Column 2: Contact information -->
        <div class="md:flex-1">
          <ul class="space-y-6 text-left">
            <li class="flex items-center gap-3">
              <DynamicIcon icon="TfiLocationPin" className="text-red-600" />
              <a
                href="https://www.google.com/maps/dir/?api=1&destination=8101+E+Mt+Houston+Rd,+Houston,+TX+77050&hl=en"
                target="_blank"
                rel="noopener"
                class="text-white hover:text-red-600 transition-colors"
              >
                8101 E Mt Houston Rd. Houston, TX 77050
              </a>
            </li>
            <li class="flex items-center gap-3">
              <DynamicIcon icon="TfiEmail" className="text-red-600" />
              <a
                href="mailto:sales@apachefabricators.com"
                class="text-white hover:text-red-600 transition-colors"
              >
                sales@apachefabricators.com
              </a>
            </li>
            <li class="flex items-center gap-3">
              <DynamicIcon icon="TfiHeadphoneAlt" className="text-red-600" />
              <a
                href="tel:+18328046236"
                class="text-white hover:text-red-600 transition-colors"
              >
                24/7 Customer Support
              </a>
            </li>
          </ul>
        </div>

        <!-- Vertical divider -->
        <div class="self-stretch hidden md:block border-l border-white/20 mx-8"></div>

        <!-- Column 3: Empty placeholder to maintain layout -->
        <div class="md:flex-1">
          <ul class="space-y-4 text-left">
            <!-- Intentionally left blank -->
          </ul>
        </div>

      </div>
    </div>
  </div>

  <!-- Horizontal separator -->
  <hr class="border-white/10" />

  <!-- Bottom section: copyright only -->
  <div class="py-6">
    <div class="container text-center">
      <p class="text-white text-sm">
        Â© 2025, Company Apache Fabricator. All rights reserved.
      </p>
    </div>
  </div>
</footer>
<!-- Preloader -->
{config.params.preloder && <Preloader />}

<script>
  import { Swiper } from "swiper";
  import "swiper/css";
  import { Autoplay, Navigation, Pagination, Thumbs } from "swiper/modules";

  window.addEventListener("load", function () {
    const body = document.body;

    // Hide preloader
    const preloader = document.querySelector(".preloader");
    preloader?.classList.add("hidden");

    // back to top button in plain js
    let backToTop = document.querySelector(".back-to-top");
    backToTop?.addEventListener("click", function () {
      document.body.scrollTop = 0;
      document.documentElement.scrollTop = 0;
    });

    // Toggle active class on dropdown item
    const navLinks = document.querySelectorAll(".nav-dropdown .nav-link");
    navLinks.forEach((navlink) => {
      navlink.addEventListener("click", function () {
        // @ts-ignore
        this.parentElement.classList.toggle("active");
      });
    });

    // Sliders
    // ----------------------------------------
    // Hero Slider
    const bannerNavSlider = new Swiper(".banner-nav-slider", {
      spaceBetween: 10,
      slidesPerView: 4,
      watchSlidesProgress: true,
    });
    new Swiper(".banner-slider", {
      modules: [Navigation, Pagination, Autoplay, Thumbs],
      slidesPerView: 1,
      loop: true,
      centeredSlides: true,
      autoplay: {
        delay: 10000,
      },
      navigation: {
        nextEl: ".swiper-navigation .next-arrow",
        prevEl: ".swiper-navigation .prev-arrow",
      },
      thumbs: {
        swiper: bannerNavSlider,
      },
    });

    // Work Slider
    new Swiper(".work-slider", {
      modules: [Pagination, Autoplay],
      autoHeight: true,
      loop: true,
      autoplay: {
        delay: 1000,
        pauseOnMouseEnter: true,
      },
      pagination: {
        el: ".work-slider + .swiper-pagination",
        clickable: true,
      },
      breakpoints: {
        0: {
          slidesPerView: "auto",
        },
        576: {
          slidesPerView: 2,
        },
        768: {
          slidesPerView: 3,
        },
        991: {
          slidesPerView: 4,
        },
      },
    });

    // Testimonial Slider
    new Swiper(".testimonial-slider", {
      modules: [Navigation, Autoplay],
      slidesPerView: 1,
      centeredSlides: true,
      spaceBetween: 80,
      autoplay: {
        delay: 3000,
        pauseOnMouseEnter: true,
      },
      navigation: {
        prevEl: ".swiper-navigation .prevArrow",
        nextEl: ".swiper-navigation .nextArrow",
      },
    });

    // Client Logo Slider
    new Swiper(".client-logo-slider", {
      modules: [Autoplay],
      loop: true,
      autoplay: {
        delay: 3000,
        pauseOnMouseEnter: true,
      },
      breakpoints: {
        0: {
          slidesPerView: 2,
        },
        576: {
          slidesPerView: 3,
        },
        1024: {
          slidesPerView: 5,
        },
      },
    });

    // Counter
    // ----------------------------------------

    // You can change this class to specify which elements are going to behave as counters.
    const elements = document.querySelectorAll<HTMLElement>(".counter");

    elements.forEach((item) => {
      // Add new attributes to the elements with the '.counter' HTML class
      (item as any).counterAlreadyFired = false;
      (item as any).counterSpeed =
        parseInt(item.getAttribute("data-counter-time") || "0", 10) / 45;
      (item as any).counterTarget = +item.innerText;
      (item as any).counterCount = 0;
      (item as any).counterStep =
        (item as any).counterTarget / (item as any).counterSpeed;

      (item as any).updateCounter = function () {
        (item as any).counterCount =
          (item as any).counterCount + (item as any).counterStep;
        item.innerText = Math.ceil((item as any).counterCount).toString();

        if ((item as any).counterCount < (item as any).counterTarget) {
          setTimeout((item as any).updateCounter, (item as any).counterSpeed);
        } else {
          item.innerText = (item as any).counterTarget.toString();
        }
      };
    });

    // Function to determine if an element is visible on the web page
    const isElementVisible = (el: HTMLElement) => {
      const scroll = window.scrollY || window.scrollY;
      const boundsTop = el.getBoundingClientRect().top + scroll;
      const viewport = {
        top: scroll,
        bottom: scroll + window.innerHeight,
      };
      const bounds = {
        top: boundsTop,
        bottom: boundsTop + el.clientHeight,
      };
      return (
        (bounds.bottom >= viewport.top && bounds.bottom <= viewport.bottom) ||
        (bounds.top <= viewport.bottom && bounds.top >= viewport.top)
      );
    };

    // Function that will get fired upon scrolling
    const handleScroll = () => {
      elements.forEach((item) => {
        if (true === (item as any).counterAlreadyFired) return;
        if (!isElementVisible(item)) return;
        (item as any).updateCounter();
        (item as any).counterAlreadyFired = true;
      });
    };

    // Fire the function on scroll
    window.addEventListener("scroll", handleScroll);

    // Navbar Toggler
    // ----------------------------------------
    const navbarToggler = document.querySelector(".navbar-toggler");
    navbarToggler?.addEventListener("click", function () {
      navbarToggler.classList.toggle("active");
      body.classList.toggle("navbar-nav-collapsed");
    });
  });
</script>
